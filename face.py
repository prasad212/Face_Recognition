
import face_recognition
from flask import Flask, jsonify, request, redirect


ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

app = Flask(__name__)


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/', methods=['GET', 'POST'])
def upload_image():
    # Check if a valid image file was uploaded
    if request.method == 'POST':
        if 'file' not in request.files:
            return redirect(request.url)

        file = request.files['file']

        if file.filename == '':
            return redirect(request.url)

        if file and allowed_file(file.filename):
            # The image file seems valid! Detect faces and return the result.

            return detect_faces_in_image(file)

    # If no valid image file was uploaded, show the file upload form:
    return '''
    <!doctype html>
    <title>Is this a picture of Obama?</title>
    <h1>Upload a picture !</h1>
    <form method="POST" enctype="multipart/form-data">
      <input type="file" name="file">
      <input type="submit" value="Upload">
    </form>
    '''


def detect_faces_in_image(file_stream):
    img = face_recognition.load_image_file(file_stream)
        # Get face encodings for any faces in the uploaded image
    unknown_face_encodings = face_recognition.face_encodings(img)
    # Pre-calculated face encoding of Obama generated with face_recognition.face_encodings(img)
    obama = face_recognition.load_image_file("obama.jpg")
    narendra_modi = face_recognition.load_image_file("naren.jpg")
    donald_trump = face_recognition.load_image_file("trump.jpg")
    # Load the jpg file into a numpy array
    #image = face_recognition.load_image_file("prasad.jpg")
    #unknown_image = face_recognition.load_image_file("yo.jpg")
  
           
    obama_face_encdoing=array=[-7.23204464e-02,  1.35010004e-01,  6.36744499e-02, -2.67444421e-02,
       -3.66931828e-03, -3.10109742e-03, -1.11843318e-01, -7.46018812e-02,
        1.80318192e-01, -1.51639298e-01,  2.66451925e-01,  7.91755691e-02,
       -2.24254355e-01, -1.32122084e-01,  8.43790919e-02,  1.55045182e-01,
       -2.41609246e-01, -8.60512629e-02, -1.02505386e-01, -7.33839422e-02,
       -6.15565712e-03, -1.16154309e-02,  7.17357844e-02,  5.75200357e-02,
       -8.61256868e-02, -3.88113230e-01, -6.69104382e-02, -1.35969177e-01,
       -3.78329307e-04, -1.75433904e-01, -1.00276977e-01, -3.08764894e-02,
       -1.74939439e-01, -1.02570459e-01, -7.17589306e-03, -4.94120177e-03,
       -4.53871302e-03, -1.34227946e-02,  1.76807597e-01,  3.37669700e-02,
       -1.26588985e-01,  6.54829070e-02, -6.29564840e-03,  2.26178974e-01,
        2.41653770e-01,  1.15561530e-01,  2.04918087e-02, -5.90783358e-02,
        1.38776362e-01, -2.26210624e-01,  5.49663343e-02,  1.71352714e-01,
        8.63245577e-02,  3.00506447e-02,  1.03940263e-01, -2.04887226e-01,
       -2.08544526e-02,  8.89000520e-02, -8.18602890e-02,  5.68663925e-02,
        5.26944660e-02, -7.12842718e-02,  2.98430547e-02,  5.18203191e-02,
        2.04209775e-01,  4.96703461e-02, -1.09083489e-01, -5.23340255e-02,
        1.11273289e-01, -2.90242434e-02, -1.32047907e-02, -1.50182117e-02,
       -1.81545109e-01, -2.26256624e-01, -2.64775813e-01,  6.11640215e-02,
        3.47226977e-01,  1.91239119e-01, -1.97597146e-01,  5.62037621e-03,
       -1.68167472e-01,  9.48886946e-03,  6.19609468e-02,  6.48773983e-02,
       -4.89189029e-02, -8.59654173e-02, -8.95416737e-02,  5.79920337e-02,
        1.09342143e-01,  5.06686233e-02, -1.94630008e-02,  2.01605797e-01,
       -3.95128876e-02,  6.05302155e-02,  3.94190662e-04,  1.02596749e-02,
       -1.55268446e-01, -2.44349428e-02, -1.68045327e-01, -5.60386404e-02,
       -1.32814962e-02, -1.79291777e-02, -2.84530316e-03,  1.22471087e-01,
       -1.92314863e-01,  7.54064769e-02,  3.94759979e-03, -1.88699458e-02,
       -1.49061456e-02,  1.19328842e-01, -8.99329111e-02, -5.09400517e-02,
        6.87621608e-02, -2.20900446e-01,  2.37240300e-01,  2.76409298e-01,
        4.07230929e-02,  1.59905210e-01,  7.47956261e-02,  5.56012504e-02,
       -1.88010298e-02, -2.75504217e-02, -1.56012371e-01, -9.27950963e-02,
        2.80142557e-02,  7.06248879e-02,  9.05940086e-02,  2.66005518e-03]
            
    modi_face_encdoing=array=[-0.17614524,  0.06199203,  0.03309776, -0.07846198,  0.0336987 ,
       -0.08531805,  0.00627931, -0.06522506,  0.18218574, -0.01539015,
        0.24852671,  0.03617684, -0.2176685 , -0.07818659,  0.00268134,
        0.05043007, -0.1802595 , -0.11188795, -0.0919956 , -0.10515407,
        0.08068361, -0.01176469,  0.0682196 ,  0.00486788, -0.12789375,
       -0.33150846, -0.16774258, -0.22217411,  0.02282457, -0.10439051,
        0.05924338, -0.06373341, -0.17348802, -0.0903812 , -0.00730794,
       -0.00048135,  0.02645524, -0.04515048,  0.12484072, -0.01739861,
       -0.11258329,  0.02949816,  0.03498418,  0.20247926,  0.19515491,
        0.08658437,  0.00580913, -0.10588444,  0.00891101, -0.21170807,
        0.08380732,  0.13739996,  0.01895479,  0.08463212,  0.08338937,
       -0.1257453 ,  0.07296875,  0.06528883, -0.2264532 ,  0.0319539 ,
        0.07318737, -0.07041665, -0.07836203,  0.01180813,  0.13626987,
        0.13400041, -0.1167373 , -0.12496889,  0.10779765, -0.15401328,
       -0.00405469,  0.05957647, -0.12505995, -0.16990413, -0.21703112,
        0.08531607,  0.43717581,  0.11896707, -0.11708912,  0.05916524,
       -0.23312706,  0.00991276,  0.01280825, -0.04334254, -0.08916351,
       -0.07318971, -0.13022099,  0.01621544,  0.08625486,  0.02274194,
       -0.00915653,  0.13014193, -0.07407835,  0.00701624,  0.07153829,
        0.13360111, -0.15916699, -0.01310169, -0.05016534, -0.04245278,
        0.02891261, -0.10996133, -0.04278847,  0.05041375, -0.18793924,
        0.12064904,  0.00503708, -0.08825977, -0.01633984,  0.00903984,
        0.00772121, -0.01419349,  0.10968441, -0.26183486,  0.24344692,
        0.23038267, -0.00905249,  0.20672819,  0.01129985,  0.10203149,
       -0.1179826 , -0.00545447, -0.17250933, -0.06540613, -0.05376134,
        0.07570671,  0.02531643, -0.00172678]
            #prasad_location=face_recognition.face_locations(prasad)
    trump_face_encoding = [-0.17465113,  0.14362991,  0.08031978, -0.05040349, -0.09000628,
        0.00762691,  0.00779023, -0.17230102,  0.13199881, -0.11509359,
        0.2149439 , -0.00308681, -0.27984139, -0.06940234,  0.00396146,
        0.16727836, -0.13949551, -0.11645323, -0.20987663, -0.15428251,
        0.07261662,  0.09052396, -0.05549354, -0.04504532, -0.09864654,
       -0.26663896, -0.09376968, -0.08604623,  0.04214548, -0.06361302,
        0.08981422,  0.00103541, -0.20369031, -0.07949278, -0.04927165,
        0.02256655, -0.10586688, -0.06941554,  0.11398517, -0.00881073,
       -0.13801159,  0.00570809,  0.0215272 ,  0.21039608,  0.19040452,
       -0.00537542,  0.03765256, -0.1267661 ,  0.08259918, -0.25089923,
       -0.04422493,  0.11692054,  0.06291198,  0.1389139 ,  0.11688849,
       -0.09598297,  0.0375773 ,  0.12397289, -0.17675827,  0.07686094,
        0.03921947, -0.23776481, -0.07404901, -0.05881063,  0.10001235,
        0.05602741, -0.01170299, -0.13813186,  0.26309842, -0.10658547,
       -0.13868478,  0.0553432 , -0.0743292 , -0.15426575, -0.34655485,
        0.03496852,  0.4095608 ,  0.1404286 , -0.18547542,  0.00587973,
       -0.05446863, -0.0131621 ,  0.083352  ,  0.04648416, -0.00497471,
       -0.12297322, -0.09548758,  0.0713515 ,  0.21796817, -0.09498252,
        0.00328694,  0.23796986,  0.0414921 , -0.03809739,  0.02389309,
        0.07846751, -0.09816306, -0.0269708 , -0.09444042, -0.06119406,
        0.11771943, -0.07067055,  0.01652485,  0.08761312, -0.09100097,
        0.20586202,  0.01425294, -0.01986133, -0.04996853, -0.09289457,
       -0.0264529 ,  0.05700288,  0.18463549, -0.13688108,  0.24794909,
        0.22818735, -0.08041582,  0.1302965 ,  0.03364855,  0.07958297,
       -0.07215616, -0.06121136, -0.19862999, -0.15479307,  0.05079654,
        0.04509491, -0.02737145,  0.05382575]
            #unknown_location=face_recognition.face_locations(unknown_image)
            #unknown_face_encdoing=face_recognition.face_encodings(unknown_image)[0]

    # except IndexError:
        #    print("I wasn't able to locate any faces in at least one of the images. Check the image files. Aborting...")
        #   quit()

    known_faces = [obama_face_encdoing,
    trump_face_encdoing,
    modi_face_encdoing]
            # Load the uploaded image file
            

    face_found = False
    is_trump = False
    is_obama=False
    is_modi=False

    if len(unknown_face_encodings) > 0:
        face_found = True
        # See if the first face in the uploaded image matches the known face of Obama
        match_results = face_recognition.compare_faces(known_faces, unknown_face_encodings[0])
        if match_results[0]:
            is_obama = True
        elif match_results[1]:
            is_modi=True
        elif match_results[2]:
            is_trump=True


    # Return the result as json
    result = {
        "face_found_in_image": face_found,
        "is_picture_of_trump": is_trump,
        "is_pict_of_obama":is_obama,
        "is_picture_of_modi":is_modi
    }
    return jsonify(result)

if __name__ == "__main__":
    app.run(host='127.0.0.0', port=5003, debug=True)